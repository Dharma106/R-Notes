
library(XLConnect)
library(tabulizer)
library(pdfsearch)
library(pdftools)
library(readr)
library(readxl)

# Function to read pdf file and produce data.
extract_FOB_pdf <- function(pdf_file){
  fob_content <- pdf_text(pdf_file)
  pdf_page <- get_n_pages(pdf_file)
  tot_pg_num <- keyword_search(fob_content, 
                               keyword = "Origin")
  pg_num <- tot_pg_num$page_num
  if(length(pg_num) != 0){
    if(pg_num != pdf_page){
      raw_data1 <- extract_tables(pdf_file, guess = TRUE, pages = pg_num)
      raw_data2 <- extract_tables(pdf_file, guess = TRUE, pages = pdf_page)
      raw_data <- c(raw_data1, raw_data2)
    } else{
      raw_data <- extract_tables(pdf_file, guess = TRUE, pages = pg_num)
    }
    
    # raw_data = extract_tables(pdf_file, guess = TRUE, pages = pg_num)
    len = length(raw_data)
    if(len != 0){
      pdf_content <- extract_text(pdf_file)
      pg_num_for_date <- keyword_search(pdf_content, 
                                        keyword = "www.coffeeagents.com")
      date_content <- read_delim(pdf_content, delim = "\t",
                                 skip = pg_num_for_date[[3]],
                                 n_max = 2)
      colnames(date_content) <- "Date"
      date_content$Date <- parse_character(date_content$Date)
      pdf_date <- as.character(na.exclude(date_content$Date))
      pdf_date <- trimws(pdf_date)
      pdf_date <- pdf_date[1]
      for_date = substr(pdf_date,
                        start = nchar(pdf_date)-10,
                        stop = nchar(pdf_date))
      for_date = trimws(for_date)
      # if(len == 1){
      #   raw_data = extract_tables(pdf_file, guess = TRUE, pages = tot_pg_num)
      # }
      # # Condition one when FOB content table is of 12 row
      fob_pos <- lapply(raw_data, function(x) which(nrow(x) == 12 | nrow(x) == 13))
      fob_pos <- which(fob_pos == 1)
      req_pos <- ifelse(length(fob_pos) != 0, fob_pos, len)
      if(nrow(raw_data[[req_pos]]) == 12 | nrow(raw_data[[req_pos]]) == 13 ){
        pdf_data = as.data.frame(raw_data[[req_pos]], na.rm = TRUE)
        col_names <- c("Origin", "Shipping Month", "Exchange", "Diff. c/lb")
        col_number <- unlist(lapply(col_names, 
                                    function(x) which(pdf_data[1, ] == x)))
        pdf_data <- pdf_data[, col_number]
        pdf_data <- pdf_data[-1, ]
        colnames(pdf_data) <- col_names
        pdf_data[, "Date"] <- for_date
      } else {
        list_num <- lapply(raw_data, function(x) which(ncol(x) == 4))
        list_num <- which(list_num == 1)
        # Condition when it is on different page and not in one table.
        if(length(list_num) == 2){
          pdf_data <- rbind(as.data.frame(raw_data[[list_num[1]]]),
                            as.data.frame(raw_data[[list_num[2]]]))
          col_names <- c("Origin", "Shipping Month", "Exchange", "Diff. c/lb")
          col_number <- unlist(lapply(col_names, 
                                      function(x) which(pdf_data[1, ] == x)))
          pdf_data <- pdf_data[, col_number]
          pdf_data <- pdf_data[-1, ]
          colnames(pdf_data) <- col_names
          pdf_data[, "Date"] <- for_date
        } else{
          list_num <- lapply(raw_data, function(x) which(ncol(x) == 5))
          list_num <- which(list_num == 1)
          if(length(list_num) == 2){
            pdf_data <- rbind(as.data.frame(raw_data[[list_num[1]]]),
                              as.data.frame(raw_data[[list_num[2]]]))
            col_names <- c("Origin", "Shipping Month", "Exchange", "Diff. c/lb")
            col_number <- unlist(lapply(col_names, 
                                        function(x) which(pdf_data[1, ] == x)))
            pdf_data <- pdf_data[, col_number]
            pdf_data <- pdf_data[-1, ]
            colnames(pdf_data) <- col_names
            pdf_data[, "Date"] <- for_date
          } else{
            print("PDF content has different format than usual one !")
          }
        }
      }
    } else{
      print("PDF content has different format")
    }
    if (exists("pdf_data")) {
      return(pdf_data) 
    }
  } else{
    print("NO FOB Data available!")
  }
}
